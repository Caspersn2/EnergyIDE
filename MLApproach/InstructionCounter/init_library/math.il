.class public auto ansi abstract sealed beforefieldinit System.Math
	extends System.Object
{
	// Fields
	.field public static literal float64 E = float64(2.718281828459045)
	.field public static literal float64 PI = float64(3.141592653589793)
	.field public static literal float64 Tau = float64(6.283185307179586)
	.field private static initonly float64[] roundPower10Double

	// Methods
	.method public hidebysig static 
		float64 Abs (
			float64 'value'
		) cil managed internalcall 
	{
		.custom instance void System.Runtime.CompilerServices.IntrinsicAttribute::.ctor() = (
			01 00 00 00
		)
	} // end of method Math::Abs

	.method public hidebysig static 
		float32 Abs (
			float32 'value'
		) cil managed internalcall 
	{
		.custom instance void System.Runtime.CompilerServices.IntrinsicAttribute::.ctor() = (
			01 00 00 00
		)
	} // end of method Math::Abs

	.method public hidebysig static 
		float64 Acos (
			float64 d
		) cil managed internalcall 
	{
		.custom instance void System.Runtime.CompilerServices.IntrinsicAttribute::.ctor() = (
			01 00 00 00
		)
	} // end of method Math::Acos

	.method public hidebysig static 
		float64 Acosh (
			float64 d
		) cil managed internalcall 
	{
		.custom instance void System.Runtime.CompilerServices.IntrinsicAttribute::.ctor() = (
			01 00 00 00
		)
	} // end of method Math::Acosh

	.method public hidebysig static 
		float64 Asin (
			float64 d
		) cil managed internalcall 
	{
		.custom instance void System.Runtime.CompilerServices.IntrinsicAttribute::.ctor() = (
			01 00 00 00
		)
	} // end of method Math::Asin

	.method public hidebysig static 
		float64 Asinh (
			float64 d
		) cil managed internalcall 
	{
		.custom instance void System.Runtime.CompilerServices.IntrinsicAttribute::.ctor() = (
			01 00 00 00
		)
	} // end of method Math::Asinh

	.method public hidebysig static 
		float64 Atan (
			float64 d
		) cil managed internalcall 
	{
		.custom instance void System.Runtime.CompilerServices.IntrinsicAttribute::.ctor() = (
			01 00 00 00
		)
	} // end of method Math::Atan

	.method public hidebysig static 
		float64 Atan2 (
			float64 y,
			float64 x
		) cil managed internalcall 
	{
		.custom instance void System.Runtime.CompilerServices.IntrinsicAttribute::.ctor() = (
			01 00 00 00
		)
	} // end of method Math::Atan2

	.method public hidebysig static 
		float64 Atanh (
			float64 d
		) cil managed internalcall 
	{
		.custom instance void System.Runtime.CompilerServices.IntrinsicAttribute::.ctor() = (
			01 00 00 00
		)
	} // end of method Math::Atanh

	.method public hidebysig static 
		float64 Cbrt (
			float64 d
		) cil managed internalcall 
	{
		.custom instance void System.Runtime.CompilerServices.IntrinsicAttribute::.ctor() = (
			01 00 00 00
		)
	} // end of method Math::Cbrt

	.method public hidebysig static 
		float64 Ceiling (
			float64 a
		) cil managed internalcall 
	{
		.custom instance void System.Runtime.CompilerServices.IntrinsicAttribute::.ctor() = (
			01 00 00 00
		)
	} // end of method Math::Ceiling

	.method public hidebysig static 
		float64 Cos (
			float64 d
		) cil managed internalcall 
	{
		.custom instance void System.Runtime.CompilerServices.IntrinsicAttribute::.ctor() = (
			01 00 00 00
		)
	} // end of method Math::Cos

	.method public hidebysig static 
		float64 Cosh (
			float64 'value'
		) cil managed internalcall 
	{
		.custom instance void System.Runtime.CompilerServices.IntrinsicAttribute::.ctor() = (
			01 00 00 00
		)
	} // end of method Math::Cosh

	.method public hidebysig static 
		float64 Exp (
			float64 d
		) cil managed internalcall 
	{
		.custom instance void System.Runtime.CompilerServices.IntrinsicAttribute::.ctor() = (
			01 00 00 00
		)
	} // end of method Math::Exp

	.method public hidebysig static 
		float64 Floor (
			float64 d
		) cil managed internalcall 
	{
		.custom instance void System.Runtime.CompilerServices.IntrinsicAttribute::.ctor() = (
			01 00 00 00
		)
	} // end of method Math::Floor

	.method public hidebysig static 
		float64 FusedMultiplyAdd (
			float64 x,
			float64 y,
			float64 z
		) cil managed internalcall 
	{
		.custom instance void System.Runtime.CompilerServices.IntrinsicAttribute::.ctor() = (
			01 00 00 00
		)
	} // end of method Math::FusedMultiplyAdd

	.method public hidebysig static 
		int32 ILogB (
			float64 x
		) cil managed internalcall 
	{
	} // end of method Math::ILogB

	.method public hidebysig static 
		float64 Log (
			float64 d
		) cil managed internalcall 
	{
	} // end of method Math::Log

	.method public hidebysig static 
		float64 Log2 (
			float64 x
		) cil managed internalcall 
	{
	} // end of method Math::Log2

	.method public hidebysig static 
		float64 Log10 (
			float64 d
		) cil managed internalcall 
	{
		.custom instance void System.Runtime.CompilerServices.IntrinsicAttribute::.ctor() = (
			01 00 00 00
		)
	} // end of method Math::Log10

	.method public hidebysig static 
		float64 Pow (
			float64 x,
			float64 y
		) cil managed internalcall 
	{
		.custom instance void System.Runtime.CompilerServices.IntrinsicAttribute::.ctor() = (
			01 00 00 00
		)
	} // end of method Math::Pow

	.method public hidebysig static 
		float64 ScaleB (
			float64 x,
			int32 n
		) cil managed internalcall 
	{
	} // end of method Math::ScaleB

	.method public hidebysig static 
		float64 Sin (
			float64 a
		) cil managed internalcall 
	{
		.custom instance void System.Runtime.CompilerServices.IntrinsicAttribute::.ctor() = (
			01 00 00 00
		)
	} // end of method Math::Sin

	.method public hidebysig static 
		float64 Sinh (
			float64 'value'
		) cil managed internalcall 
	{
		.custom instance void System.Runtime.CompilerServices.IntrinsicAttribute::.ctor() = (
			01 00 00 00
		)
	} // end of method Math::Sinh

	.method public hidebysig static 
		float64 Sqrt (
			float64 d
		) cil managed internalcall 
	{
		.custom instance void System.Runtime.CompilerServices.IntrinsicAttribute::.ctor() = (
			01 00 00 00
		)
	} // end of method Math::Sqrt

	.method public hidebysig static 
		float64 Tan (
			float64 a
		) cil managed internalcall 
	{
		.custom instance void System.Runtime.CompilerServices.IntrinsicAttribute::.ctor() = (
			01 00 00 00
		)
	} // end of method Math::Tan

	.method public hidebysig static 
		float64 Tanh (
			float64 'value'
		) cil managed internalcall 
	{
		.custom instance void System.Runtime.CompilerServices.IntrinsicAttribute::.ctor() = (
			01 00 00 00
		)
	} // end of method Math::Tanh

	.method private hidebysig static 
		float64 ModF (
			float64 x,
			float64* intptr
		) cil managed internalcall 
	{
	} // end of method Math::ModF

	.method public hidebysig static 
		int16 Abs (
			int16 'value'
		) cil managed aggressiveinlining 
	{
		// Method begins at RVA 0x4bd33
		// Code size 20 (0x14)
		.maxstack 8

		IL_0000: ldarg.0
		IL_0001: ldc.i4.0
		IL_0002: bge.s IL_0012

		IL_0004: ldarg.0
		IL_0005: neg
		IL_0006: conv.i2
		IL_0007: starg.s 'value'
		IL_0009: ldarg.0
		IL_000a: ldc.i4.0
		IL_000b: bge.s IL_0012

		IL_000d: call void System.Math::ThrowAbsOverflow()

		IL_0012: ldarg.0
		IL_0013: ret
	} // end of method Math::Abs

	.method public hidebysig static 
		int32 Abs (
			int32 'value'
		) cil managed aggressiveinlining 
	{
		// Method begins at RVA 0x4bd48
		// Code size 19 (0x13)
		.maxstack 8

		IL_0000: ldarg.0
		IL_0001: ldc.i4.0
		IL_0002: bge.s IL_0011

		IL_0004: ldarg.0
		IL_0005: neg
		IL_0006: starg.s 'value'
		IL_0008: ldarg.0
		IL_0009: ldc.i4.0
		IL_000a: bge.s IL_0011

		IL_000c: call void System.Math::ThrowAbsOverflow()

		IL_0011: ldarg.0
		IL_0012: ret
	} // end of method Math::Abs

	.method public hidebysig static 
		int64 Abs (
			int64 'value'
		) cil managed aggressiveinlining 
	{
		// Method begins at RVA 0x4bd5c
		// Code size 21 (0x15)
		.maxstack 8

		IL_0000: ldarg.0
		IL_0001: ldc.i4.0
		IL_0002: conv.i8
		IL_0003: bge.s IL_0013

		IL_0005: ldarg.0
		IL_0006: neg
		IL_0007: starg.s 'value'
		IL_0009: ldarg.0
		IL_000a: ldc.i4.0
		IL_000b: conv.i8
		IL_000c: bge.s IL_0013

		IL_000e: call void System.Math::ThrowAbsOverflow()

		IL_0013: ldarg.0
		IL_0014: ret
	} // end of method Math::Abs

	.method public hidebysig static 
		int8 Abs (
			int8 'value'
		) cil managed aggressiveinlining 
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (
			01 00 00 00 00
		)
		// Method begins at RVA 0x4bd72
		// Code size 20 (0x14)
		.maxstack 8

		IL_0000: ldarg.0
		IL_0001: ldc.i4.0
		IL_0002: bge.s IL_0012

		IL_0004: ldarg.0
		IL_0005: neg
		IL_0006: conv.i1
		IL_0007: starg.s 'value'
		IL_0009: ldarg.0
		IL_000a: ldc.i4.0
		IL_000b: bge.s IL_0012

		IL_000d: call void System.Math::ThrowAbsOverflow()

		IL_0012: ldarg.0
		IL_0013: ret
	} // end of method Math::Abs

	.method public hidebysig static 
		valuetype System.Decimal Abs (
			valuetype System.Decimal 'value'
		) cil managed aggressiveinlining 
	{
		// Method begins at RVA 0x4bd87
		// Code size 8 (0x8)
		.maxstack 8

		IL_0000: ldarga.s 'value'
		IL_0002: call valuetype System.Decimal System.Decimal::Abs(valuetype System.Decimal&)
		IL_0007: ret
	} // end of method Math::Abs

	.method private hidebysig static 
		void ThrowAbsOverflow () cil managed 
	{
		.custom instance void System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute::.ctor() = (
			01 00 00 00
		)
		.custom instance void System.Diagnostics.StackTraceHiddenAttribute::.ctor() = (
			01 00 00 00
		)
		// Method begins at RVA 0x4bd90
		// Code size 11 (0xb)
		.maxstack 8

		IL_0000: call string System.SR::get_Overflow_NegateTwosCompNum()
		IL_0005: newobj instance void System.OverflowException::.ctor(string)
		IL_000a: throw
	} // end of method Math::ThrowAbsOverflow

	.method public hidebysig static 
		int64 BigMul (
			int32 a,
			int32 b
		) cil managed 
	{
		// Method begins at RVA 0x4bd9c
		// Code size 6 (0x6)
		.maxstack 8

		IL_0000: ldarg.0
		IL_0001: conv.i8
		IL_0002: ldarg.1
		IL_0003: conv.i8
		IL_0004: mul
		IL_0005: ret
	} // end of method Math::BigMul

	.method public hidebysig static 
		uint64 BigMul (
			uint64 a,
			uint64 b,
			[out] uint64& low
		) cil managed aggressiveinlining 
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (
			01 00 00 00 00
		)
		// Method begins at RVA 0x4bda4
		// Code size 32 (0x20)
		.maxstack 3
		.locals (
			[0] uint64,
			[1] uint64
		)

		IL_0000: call bool System.Runtime.Intrinsics.X86.Bmi2/X64::get_IsSupported()
		IL_0005: brfalse.s IL_0017

		IL_0007: ldarg.0
		IL_0008: ldarg.1
		IL_0009: ldloca.s 0
		IL_000b: conv.u
		IL_000c: call uint64 System.Runtime.Intrinsics.X86.Bmi2/X64::MultiplyNoFlags(uint64, uint64, uint64*)
		IL_0011: stloc.1
		IL_0012: ldarg.2
		IL_0013: ldloc.0
		IL_0014: stind.i8
		IL_0015: ldloc.1
		IL_0016: ret

		IL_0017: ldarg.0
		IL_0018: ldarg.1
		IL_0019: ldarg.2
		IL_001a: call uint64 System.Math::'<BigMul>g__SoftwareFallback|42_0'(uint64, uint64, uint64&)
		IL_001f: ret
	} // end of method Math::BigMul

	.method public hidebysig static 
		int64 BigMul (
			int64 a,
			int64 b,
			[out] int64& low
		) cil managed 
	{
		// Method begins at RVA 0x4bdd0
		// Code size 29 (0x1d)
		.maxstack 3
		.locals (
			[0] uint64,
			[1] uint64
		)

		IL_0000: ldarg.0
		IL_0001: ldarg.1
		IL_0002: ldloca.s 1
		IL_0004: call uint64 System.Math::BigMul(uint64, uint64, uint64&)
		IL_0009: stloc.0
		IL_000a: ldarg.2
		IL_000b: ldloc.1
		IL_000c: stind.i8
		IL_000d: ldloc.0
		IL_000e: ldarg.0
		IL_000f: ldc.i4.s 63
		IL_0011: shr
		IL_0012: ldarg.1
		IL_0013: and
		IL_0014: sub
		IL_0015: ldarg.1
		IL_0016: ldc.i4.s 63
		IL_0018: shr
		IL_0019: ldarg.0
		IL_001a: and
		IL_001b: sub
		IL_001c: ret
	} // end of method Math::BigMul

	.method public hidebysig static 
		float64 BitDecrement (
			float64 x
		) cil managed 
	{
		// Method begins at RVA 0x4bdfc
		// Code size 83 (0x53)
		.maxstack 3
		.locals (
			[0] int64
		)

		IL_0000: ldarg.0
		IL_0001: call int64 System.BitConverter::DoubleToInt64Bits(float64)
		IL_0006: stloc.0
		IL_0007: ldloc.0
		IL_0008: ldc.i4.s 32
		IL_000a: shr
		IL_000b: ldc.i4 2146435072
		IL_0010: conv.i8
		IL_0011: and
		IL_0012: ldc.i4 2146435072
		IL_0017: conv.i8
		IL_0018: blt.s IL_0032

		IL_001a: ldloc.0
		IL_001b: ldc.i8 9218868437227405312
		IL_0024: beq.s IL_0028

		IL_0026: ldarg.0
		IL_0027: ret

		IL_0028: ldc.r8 1.7976931348623157E+308
		IL_0031: ret

		IL_0032: ldloc.0
		IL_0033: brtrue.s IL_003f

		IL_0035: ldc.r8 -5E-324
		IL_003e: ret

		IL_003f: ldloc.0
		IL_0040: ldloc.0
		IL_0041: ldc.i4.0
		IL_0042: conv.i8
		IL_0043: blt.s IL_0048

		IL_0045: ldc.i4.m1
		IL_0046: br.s IL_0049

		IL_0048: ldc.i4.1

		IL_0049: conv.i8
		IL_004a: add
		IL_004b: stloc.0
		IL_004c: ldloc.0
		IL_004d: call float64 System.BitConverter::Int64BitsToDouble(int64)
		IL_0052: ret
	} // end of method Math::BitDecrement

	.method public hidebysig static 
		float64 BitIncrement (
			float64 x
		) cil managed 
	{
		// Method begins at RVA 0x4be5c
		// Code size 92 (0x5c)
		.maxstack 3
		.locals (
			[0] int64
		)

		IL_0000: ldarg.0
		IL_0001: call int64 System.BitConverter::DoubleToInt64Bits(float64)
		IL_0006: stloc.0
		IL_0007: ldloc.0
		IL_0008: ldc.i4.s 32
		IL_000a: shr
		IL_000b: ldc.i4 2146435072
		IL_0010: conv.i8
		IL_0011: and
		IL_0012: ldc.i4 2146435072
		IL_0017: conv.i8
		IL_0018: blt.s IL_0032

		IL_001a: ldloc.0
		IL_001b: ldc.i8 -4503599627370496
		IL_0024: beq.s IL_0028

		IL_0026: ldarg.0
		IL_0027: ret

		IL_0028: ldc.r8 -1.7976931348623157E+308
		IL_0031: ret

		IL_0032: ldloc.0
		IL_0033: ldc.i8 -9223372036854775808
		IL_003c: bne.un.s IL_0048

		IL_003e: ldc.r8 5E-324
		IL_0047: ret

		IL_0048: ldloc.0
		IL_0049: ldloc.0
		IL_004a: ldc.i4.0
		IL_004b: conv.i8
		IL_004c: blt.s IL_0051

		IL_004e: ldc.i4.1
		IL_004f: br.s IL_0052

		IL_0051: ldc.i4.m1

		IL_0052: conv.i8
		IL_0053: add
		IL_0054: stloc.0
		IL_0055: ldloc.0
		IL_0056: call float64 System.BitConverter::Int64BitsToDouble(int64)
		IL_005b: ret
	} // end of method Math::BitIncrement

	.method public hidebysig static 
		float64 CopySign (
			float64 x,
			float64 y
		) cil managed aggressiveinlining 
	{
		// Method begins at RVA 0x4bec4
		// Code size 59 (0x3b)
		.maxstack 8

		IL_0000: call bool System.Runtime.Intrinsics.X86.Sse2::get_IsSupported()
		IL_0005: brtrue.s IL_000e

		IL_0007: call bool System.Runtime.Intrinsics.Arm.AdvSimd::get_IsSupported()
		IL_000c: brfalse.s IL_0033

		IL_000e: ldc.r8 -0.0
		IL_0017: call valuetype System.Runtime.Intrinsics.Vector128`1<float64> System.Runtime.Intrinsics.Vector128::CreateScalarUnsafe(float64)
		IL_001c: ldarg.1
		IL_001d: call valuetype System.Runtime.Intrinsics.Vector128`1<float64> System.Runtime.Intrinsics.Vector128::CreateScalarUnsafe(float64)
		IL_0022: ldarg.0
		IL_0023: call valuetype System.Runtime.Intrinsics.Vector128`1<float64> System.Runtime.Intrinsics.Vector128::CreateScalarUnsafe(float64)
		IL_0028: call valuetype System.Runtime.Intrinsics.Vector128`1<float64> System.Numerics.VectorMath::ConditionalSelectBitwise(valuetype System.Runtime.Intrinsics.Vector128`1<float64>, valuetype System.Runtime.Intrinsics.Vector128`1<float64>, valuetype System.Runtime.Intrinsics.Vector128`1<float64>)
		IL_002d: call !!0 System.Runtime.Intrinsics.Vector128::ToScalar<float64>(valuetype System.Runtime.Intrinsics.Vector128`1<!!0>)
		IL_0032: ret

		IL_0033: ldarg.0
		IL_0034: ldarg.1
		IL_0035: call float64 System.Math::'<CopySign>g__SoftwareFallback|46_0'(float64, float64)
		IL_003a: ret
	} // end of method Math::CopySign

	.method public hidebysig static 
		int32 DivRem (
			int32 a,
			int32 b,
			[out] int32& result
		) cil managed 
	{
		// Method begins at RVA 0x4bf00
		// Code size 13 (0xd)
		.maxstack 4
		.locals (
			[0] int32
		)

		IL_0000: ldarg.0
		IL_0001: ldarg.1
		IL_0002: div
		IL_0003: stloc.0
		IL_0004: ldarg.2
		IL_0005: ldarg.0
		IL_0006: ldloc.0
		IL_0007: ldarg.1
		IL_0008: mul
		IL_0009: sub
		IL_000a: stind.i4
		IL_000b: ldloc.0
		IL_000c: ret
	} // end of method Math::DivRem

	.method public hidebysig static 
		int64 DivRem (
			int64 a,
			int64 b,
			[out] int64& result
		) cil managed 
	{
		// Method begins at RVA 0x4bf1c
		// Code size 13 (0xd)
		.maxstack 4
		.locals (
			[0] int64
		)

		IL_0000: ldarg.0
		IL_0001: ldarg.1
		IL_0002: div
		IL_0003: stloc.0
		IL_0004: ldarg.2
		IL_0005: ldarg.0
		IL_0006: ldloc.0
		IL_0007: ldarg.1
		IL_0008: mul
		IL_0009: sub
		IL_000a: stind.i8
		IL_000b: ldloc.0
		IL_000c: ret
	} // end of method Math::DivRem

	.method assembly hidebysig static 
		uint32 DivRem (
			uint32 a,
			uint32 b,
			[out] uint32& result
		) cil managed 
	{
		// Method begins at RVA 0x4bf38
		// Code size 13 (0xd)
		.maxstack 4
		.locals (
			[0] uint32
		)

		IL_0000: ldarg.0
		IL_0001: ldarg.1
		IL_0002: div.un
		IL_0003: stloc.0
		IL_0004: ldarg.2
		IL_0005: ldarg.0
		IL_0006: ldloc.0
		IL_0007: ldarg.1
		IL_0008: mul
		IL_0009: sub
		IL_000a: stind.i4
		IL_000b: ldloc.0
		IL_000c: ret
	} // end of method Math::DivRem

	.method assembly hidebysig static 
		uint64 DivRem (
			uint64 a,
			uint64 b,
			[out] uint64& result
		) cil managed 
	{
		// Method begins at RVA 0x4bf54
		// Code size 13 (0xd)
		.maxstack 4
		.locals (
			[0] uint64
		)

		IL_0000: ldarg.0
		IL_0001: ldarg.1
		IL_0002: div.un
		IL_0003: stloc.0
		IL_0004: ldarg.2
		IL_0005: ldarg.0
		IL_0006: ldloc.0
		IL_0007: ldarg.1
		IL_0008: mul
		IL_0009: sub
		IL_000a: stind.i8
		IL_000b: ldloc.0
		IL_000c: ret
	} // end of method Math::DivRem

	.method public hidebysig static 
		valuetype System.Decimal Ceiling (
			valuetype System.Decimal d
		) cil managed aggressiveinlining 
	{
		// Method begins at RVA 0x4bf6d
		// Code size 7 (0x7)
		.maxstack 8

		IL_0000: ldarg.0
		IL_0001: call valuetype System.Decimal System.Decimal::Ceiling(valuetype System.Decimal)
		IL_0006: ret
	} // end of method Math::Ceiling

	.method public hidebysig static 
		uint8 Clamp (
			uint8 'value',
			uint8 min,
			uint8 max
		) cil managed aggressiveinlining 
	{
		// Method begins at RVA 0x4bf75
		// Code size 25 (0x19)
		.maxstack 8

		IL_0000: ldarg.1
		IL_0001: ldarg.2
		IL_0002: ble.s IL_000b

		IL_0004: ldarg.1
		IL_0005: ldarg.2
		IL_0006: call void System.Math::ThrowMinMaxException<uint8>(!!0, !!0)

		IL_000b: ldarg.0
		IL_000c: ldarg.1
		IL_000d: bge.s IL_0011

		IL_000f: ldarg.1
		IL_0010: ret

		IL_0011: ldarg.0
		IL_0012: ldarg.2
		IL_0013: ble.s IL_0017

		IL_0015: ldarg.2
		IL_0016: ret

		IL_0017: ldarg.0
		IL_0018: ret
	} // end of method Math::Clamp

	.method public hidebysig static 
		valuetype System.Decimal Clamp (
			valuetype System.Decimal 'value',
			valuetype System.Decimal min,
			valuetype System.Decimal max
		) cil managed aggressiveinlining 
	{
		// Method begins at RVA 0x4bf8f
		// Code size 40 (0x28)
		.maxstack 8

		IL_0000: ldarg.1
		IL_0001: ldarg.2
		IL_0002: call bool System.Decimal::op_GreaterThan(valuetype System.Decimal, valuetype System.Decimal)
		IL_0007: brfalse.s IL_0010

		IL_0009: ldarg.1
		IL_000a: ldarg.2
		IL_000b: call void System.Math::ThrowMinMaxException<valuetype System.Decimal>(!!0, !!0)

		IL_0010: ldarg.0
		IL_0011: ldarg.1
		IL_0012: call bool System.Decimal::op_LessThan(valuetype System.Decimal, valuetype System.Decimal)
		IL_0017: brfalse.s IL_001b

		IL_0019: ldarg.1
		IL_001a: ret

		IL_001b: ldarg.0
		IL_001c: ldarg.2
		IL_001d: call bool System.Decimal::op_GreaterThan(valuetype System.Decimal, valuetype System.Decimal)
		IL_0022: brfalse.s IL_0026

		IL_0024: ldarg.2
		IL_0025: ret

		IL_0026: ldarg.0
		IL_0027: ret
	} // end of method Math::Clamp

	.method public hidebysig static 
		float64 Clamp (
			float64 'value',
			float64 min,
			float64 max
		) cil managed aggressiveinlining 
	{
		// Method begins at RVA 0x4bfb8
		// Code size 25 (0x19)
		.maxstack 8

		IL_0000: ldarg.1
		IL_0001: ldarg.2
		IL_0002: ble.un.s IL_000b

		IL_0004: ldarg.1
		IL_0005: ldarg.2
		IL_0006: call void System.Math::ThrowMinMaxException<float64>(!!0, !!0)

		IL_000b: ldarg.0
		IL_000c: ldarg.1
		IL_000d: bge.un.s IL_0011

		IL_000f: ldarg.1
		IL_0010: ret

		IL_0011: ldarg.0
		IL_0012: ldarg.2
		IL_0013: ble.un.s IL_0017

		IL_0015: ldarg.2
		IL_0016: ret

		IL_0017: ldarg.0
		IL_0018: ret
	} // end of method Math::Clamp

	.method public hidebysig static 
		int16 Clamp (
			int16 'value',
			int16 min,
			int16 max
		) cil managed aggressiveinlining 
	{
		// Method begins at RVA 0x4bfd2
		// Code size 25 (0x19)
		.maxstack 8

		IL_0000: ldarg.1
		IL_0001: ldarg.2
		IL_0002: ble.s IL_000b

		IL_0004: ldarg.1
		IL_0005: ldarg.2
		IL_0006: call void System.Math::ThrowMinMaxException<int16>(!!0, !!0)

		IL_000b: ldarg.0
		IL_000c: ldarg.1
		IL_000d: bge.s IL_0011

		IL_000f: ldarg.1
		IL_0010: ret

		IL_0011: ldarg.0
		IL_0012: ldarg.2
		IL_0013: ble.s IL_0017

		IL_0015: ldarg.2
		IL_0016: ret

		IL_0017: ldarg.0
		IL_0018: ret
	} // end of method Math::Clamp

	.method public hidebysig static 
		int32 Clamp (
			int32 'value',
			int32 min,
			int32 max
		) cil managed aggressiveinlining 
	{
		// Method begins at RVA 0x4bfec
		// Code size 25 (0x19)
		.maxstack 8

		IL_0000: ldarg.1
		IL_0001: ldarg.2
		IL_0002: ble.s IL_000b

		IL_0004: ldarg.1
		IL_0005: ldarg.2
		IL_0006: call void System.Math::ThrowMinMaxException<int32>(!!0, !!0)

		IL_000b: ldarg.0
		IL_000c: ldarg.1
		IL_000d: bge.s IL_0011

		IL_000f: ldarg.1
		IL_0010: ret

		IL_0011: ldarg.0
		IL_0012: ldarg.2
		IL_0013: ble.s IL_0017

		IL_0015: ldarg.2
		IL_0016: ret

		IL_0017: ldarg.0
		IL_0018: ret
	} // end of method Math::Clamp

	.method public hidebysig static 
		int64 Clamp (
			int64 'value',
			int64 min,
			int64 max
		) cil managed aggressiveinlining 
	{
		// Method begins at RVA 0x4c006
		// Code size 25 (0x19)
		.maxstack 8

		IL_0000: ldarg.1
		IL_0001: ldarg.2
		IL_0002: ble.s IL_000b

		IL_0004: ldarg.1
		IL_0005: ldarg.2
		IL_0006: call void System.Math::ThrowMinMaxException<int64>(!!0, !!0)

		IL_000b: ldarg.0
		IL_000c: ldarg.1
		IL_000d: bge.s IL_0011

		IL_000f: ldarg.1
		IL_0010: ret

		IL_0011: ldarg.0
		IL_0012: ldarg.2
		IL_0013: ble.s IL_0017

		IL_0015: ldarg.2
		IL_0016: ret

		IL_0017: ldarg.0
		IL_0018: ret
	} // end of method Math::Clamp

	.method public hidebysig static 
		int8 Clamp (
			int8 'value',
			int8 min,
			int8 max
		) cil managed aggressiveinlining 
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (
			01 00 00 00 00
		)
		// Method begins at RVA 0x4c020
		// Code size 25 (0x19)
		.maxstack 8

		IL_0000: ldarg.1
		IL_0001: ldarg.2
		IL_0002: ble.s IL_000b

		IL_0004: ldarg.1
		IL_0005: ldarg.2
		IL_0006: call void System.Math::ThrowMinMaxException<int8>(!!0, !!0)

		IL_000b: ldarg.0
		IL_000c: ldarg.1
		IL_000d: bge.s IL_0011

		IL_000f: ldarg.1
		IL_0010: ret

		IL_0011: ldarg.0
		IL_0012: ldarg.2
		IL_0013: ble.s IL_0017

		IL_0015: ldarg.2
		IL_0016: ret

		IL_0017: ldarg.0
		IL_0018: ret
	} // end of method Math::Clamp

	.method public hidebysig static 
		float32 Clamp (
			float32 'value',
			float32 min,
			float32 max
		) cil managed aggressiveinlining 
	{
		// Method begins at RVA 0x4c03a
		// Code size 25 (0x19)
		.maxstack 8

		IL_0000: ldarg.1
		IL_0001: ldarg.2
		IL_0002: ble.un.s IL_000b

		IL_0004: ldarg.1
		IL_0005: ldarg.2
		IL_0006: call void System.Math::ThrowMinMaxException<float32>(!!0, !!0)

		IL_000b: ldarg.0
		IL_000c: ldarg.1
		IL_000d: bge.un.s IL_0011

		IL_000f: ldarg.1
		IL_0010: ret

		IL_0011: ldarg.0
		IL_0012: ldarg.2
		IL_0013: ble.un.s IL_0017

		IL_0015: ldarg.2
		IL_0016: ret

		IL_0017: ldarg.0
		IL_0018: ret
	} // end of method Math::Clamp

	.method public hidebysig static 
		uint16 Clamp (
			uint16 'value',
			uint16 min,
			uint16 max
		) cil managed aggressiveinlining 
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (
			01 00 00 00 00
		)
		// Method begins at RVA 0x4c054
		// Code size 25 (0x19)
		.maxstack 8

		IL_0000: ldarg.1
		IL_0001: ldarg.2
		IL_0002: ble.s IL_000b

		IL_0004: ldarg.1
		IL_0005: ldarg.2
		IL_0006: call void System.Math::ThrowMinMaxException<uint16>(!!0, !!0)

		IL_000b: ldarg.0
		IL_000c: ldarg.1
		IL_000d: bge.s IL_0011

		IL_000f: ldarg.1
		IL_0010: ret

		IL_0011: ldarg.0
		IL_0012: ldarg.2
		IL_0013: ble.s IL_0017

		IL_0015: ldarg.2
		IL_0016: ret

		IL_0017: ldarg.0
		IL_0018: ret
	} // end of method Math::Clamp

	.method public hidebysig static 
		uint32 Clamp (
			uint32 'value',
			uint32 min,
			uint32 max
		) cil managed aggressiveinlining 
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (
			01 00 00 00 00
		)
		// Method begins at RVA 0x4c06e
		// Code size 25 (0x19)
		.maxstack 8

		IL_0000: ldarg.1
		IL_0001: ldarg.2
		IL_0002: ble.un.s IL_000b

		IL_0004: ldarg.1
		IL_0005: ldarg.2
		IL_0006: call void System.Math::ThrowMinMaxException<uint32>(!!0, !!0)

		IL_000b: ldarg.0
		IL_000c: ldarg.1
		IL_000d: bge.un.s IL_0011

		IL_000f: ldarg.1
		IL_0010: ret

		IL_0011: ldarg.0
		IL_0012: ldarg.2
		IL_0013: ble.un.s IL_0017

		IL_0015: ldarg.2
		IL_0016: ret

		IL_0017: ldarg.0
		IL_0018: ret
	} // end of method Math::Clamp

	.method public hidebysig static 
		uint64 Clamp (
			uint64 'value',
			uint64 min,
			uint64 max
		) cil managed aggressiveinlining 
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (
			01 00 00 00 00
		)
		// Method begins at RVA 0x4c088
		// Code size 25 (0x19)
		.maxstack 8

		IL_0000: ldarg.1
		IL_0001: ldarg.2
		IL_0002: ble.un.s IL_000b

		IL_0004: ldarg.1
		IL_0005: ldarg.2
		IL_0006: call void System.Math::ThrowMinMaxException<uint64>(!!0, !!0)

		IL_000b: ldarg.0
		IL_000c: ldarg.1
		IL_000d: bge.un.s IL_0011

		IL_000f: ldarg.1
		IL_0010: ret

		IL_0011: ldarg.0
		IL_0012: ldarg.2
		IL_0013: ble.un.s IL_0017

		IL_0015: ldarg.2
		IL_0016: ret

		IL_0017: ldarg.0
		IL_0018: ret
	} // end of method Math::Clamp

	.method public hidebysig static 
		valuetype System.Decimal Floor (
			valuetype System.Decimal d
		) cil managed aggressiveinlining 
	{
		// Method begins at RVA 0x4c0a2
		// Code size 7 (0x7)
		.maxstack 8

		IL_0000: ldarg.0
		IL_0001: call valuetype System.Decimal System.Decimal::Floor(valuetype System.Decimal)
		IL_0006: ret
	} // end of method Math::Floor

	.method public hidebysig static 
		float64 IEEERemainder (
			float64 x,
			float64 y
		) cil managed 
	{
		// Method begins at RVA 0x4c0ac
		// Code size 150 (0x96)
		.maxstack 3
		.locals (
			[0] float64,
			[1] float64,
			[2] float64,
			[3] float64
		)

		IL_0000: ldarg.0
		IL_0001: call bool System.Double::IsNaN(float64)
		IL_0006: brfalse.s IL_000a

		IL_0008: ldarg.0
		IL_0009: ret

		IL_000a: ldarg.1
		IL_000b: call bool System.Double::IsNaN(float64)
		IL_0010: brfalse.s IL_0014

		IL_0012: ldarg.1
		IL_0013: ret

		IL_0014: ldarg.0
		IL_0015: ldarg.1
		IL_0016: rem
		IL_0017: stloc.0
		IL_0018: ldloc.0
		IL_0019: call bool System.Double::IsNaN(float64)
		IL_001e: brfalse.s IL_002a

		IL_0020: ldc.r8 (00 00 00 00 00 00 F8 FF)
		IL_0029: ret

		IL_002a: ldloc.0
		IL_002b: ldc.r8 0.0
		IL_0034: bne.un.s IL_0048

		IL_0036: ldarg.0
		IL_0037: call bool System.Double::IsNegative(float64)
		IL_003c: brfalse.s IL_0048

		IL_003e: ldc.r8 -0.0
		IL_0047: ret

		IL_0048: ldloc.0
		IL_0049: ldarg.1
		IL_004a: call float64 System.Math::Abs(float64)
		IL_004f: ldarg.0
		IL_0050: call int32 System.Math::Sign(float64)
		IL_0055: conv.r8
		IL_0056: mul
		IL_0057: sub
		IL_0058: stloc.1
		IL_0059: ldloc.1
		IL_005a: call float64 System.Math::Abs(float64)
		IL_005f: ldloc.0
		IL_0060: call float64 System.Math::Abs(float64)
		IL_0065: bne.un.s IL_0084

		IL_0067: ldarg.0
		IL_0068: ldarg.1
		IL_0069: div
		IL_006a: stloc.2
		IL_006b: ldloc.2
		IL_006c: call float64 System.Math::Round(float64)
		IL_0071: stloc.3
		IL_0072: ldloc.3
		IL_0073: call float64 System.Math::Abs(float64)
		IL_0078: ldloc.2
		IL_0079: call float64 System.Math::Abs(float64)
		IL_007e: ble.un.s IL_0082

		IL_0080: ldloc.1
		IL_0081: ret

		IL_0082: ldloc.0
		IL_0083: ret

		IL_0084: ldloc.1
		IL_0085: call float64 System.Math::Abs(float64)
		IL_008a: ldloc.0
		IL_008b: call float64 System.Math::Abs(float64)
		IL_0090: bge.un.s IL_0094

		IL_0092: ldloc.1
		IL_0093: ret

		IL_0094: ldloc.0
		IL_0095: ret
	} // end of method Math::IEEERemainder

	.method public hidebysig static 
		float64 Log (
			float64 a,
			float64 newBase
		) cil managed 
	{
		// Method begins at RVA 0x4c150
		// Code size 98 (0x62)
		.maxstack 2

		IL_0000: ldarg.0
		IL_0001: call bool System.Double::IsNaN(float64)
		IL_0006: brfalse.s IL_000a

		IL_0008: ldarg.0
		IL_0009: ret

		IL_000a: ldarg.1
		IL_000b: call bool System.Double::IsNaN(float64)
		IL_0010: brfalse.s IL_0014

		IL_0012: ldarg.1
		IL_0013: ret

		IL_0014: ldarg.1
		IL_0015: ldc.r8 1
		IL_001e: bne.un.s IL_002a

		IL_0020: ldc.r8 (00 00 00 00 00 00 F8 FF)
		IL_0029: ret

		IL_002a: ldarg.0
		IL_002b: ldc.r8 1
		IL_0034: beq.s IL_0054

		IL_0036: ldarg.1
		IL_0037: ldc.r8 0.0
		IL_0040: beq.s IL_004a

		IL_0042: ldarg.1
		IL_0043: call bool System.Double::IsPositiveInfinity(float64)
		IL_0048: brfalse.s IL_0054

		IL_004a: ldc.r8 (00 00 00 00 00 00 F8 FF)
		IL_0053: ret

		IL_0054: ldarg.0
		IL_0055: call float64 System.Math::Log(float64)
		IL_005a: ldarg.1
		IL_005b: call float64 System.Math::Log(float64)
		IL_0060: div
		IL_0061: ret
	} // end of method Math::Log

	.method public hidebysig static 
		uint8 Max (
			uint8 val1,
			uint8 val2
		) cil managed 
	{
		.custom instance void System.Runtime.Versioning.NonVersionableAttribute::.ctor() = (
			01 00 00 00
		)
		// Method begins at RVA 0x4c1be
		// Code size 8 (0x8)
		.maxstack 8

		IL_0000: ldarg.0
		IL_0001: ldarg.1
		IL_0002: bge.s IL_0006

		IL_0004: ldarg.1
		IL_0005: ret

		IL_0006: ldarg.0
		IL_0007: ret
	} // end of method Math::Max

	.method public hidebysig static 
		valuetype System.Decimal Max (
			valuetype System.Decimal val1,
			valuetype System.Decimal val2
		) cil managed aggressiveinlining 
	{
		// Method begins at RVA 0x4c1c7
		// Code size 15 (0xf)
		.maxstack 8

		IL_0000: ldarga.s val1
		IL_0002: ldarga.s val2
		IL_0004: call valuetype System.Decimal& modreq(System.Runtime.InteropServices.InAttribute) System.Decimal::Max(valuetype System.Decimal&, valuetype System.Decimal&)
		IL_0009: ldobj System.Decimal
		IL_000e: ret
	} // end of method Math::Max

	.method public hidebysig static 
		float64 Max (
			float64 val1,
			float64 val2
		) cil managed aggressiveinlining 
	{
		// Method begins at RVA 0x4c1d7
		// Code size 34 (0x22)
		.maxstack 8

		IL_0000: ldarg.0
		IL_0001: ldarg.1
		IL_0002: beq.s IL_0016

		IL_0004: ldarg.0
		IL_0005: call bool System.Double::IsNaN(float64)
		IL_000a: brtrue.s IL_0014

		IL_000c: ldarg.1
		IL_000d: ldarg.0
		IL_000e: blt.s IL_0012

		IL_0010: ldarg.1
		IL_0011: ret

		IL_0012: ldarg.0
		IL_0013: ret

		IL_0014: ldarg.0
		IL_0015: ret

		IL_0016: ldarg.1
		IL_0017: call bool System.Double::IsNegative(float64)
		IL_001c: brtrue.s IL_0020

		IL_001e: ldarg.1
		IL_001f: ret

		IL_0020: ldarg.0
		IL_0021: ret
	} // end of method Math::Max

	.method public hidebysig static 
		int16 Max (
			int16 val1,
			int16 val2
		) cil managed 
	{
		.custom instance void System.Runtime.Versioning.NonVersionableAttribute::.ctor() = (
			01 00 00 00
		)
		// Method begins at RVA 0x4c1be
		// Code size 8 (0x8)
		.maxstack 8

		IL_0000: ldarg.0
		IL_0001: ldarg.1
		IL_0002: bge.s IL_0006

		IL_0004: ldarg.1
		IL_0005: ret

		IL_0006: ldarg.0
		IL_0007: ret
	} // end of method Math::Max

	.method public hidebysig static 
		int32 Max (
			int32 val1,
			int32 val2
		) cil managed 
	{
		.custom instance void System.Runtime.Versioning.NonVersionableAttribute::.ctor() = (
			01 00 00 00
		)
		// Method begins at RVA 0x4c1be
		// Code size 8 (0x8)
		.maxstack 8

		IL_0000: ldarg.0
		IL_0001: ldarg.1
		IL_0002: bge.s IL_0006

		IL_0004: ldarg.1
		IL_0005: ret

		IL_0006: ldarg.0
		IL_0007: ret
	} // end of method Math::Max

	.method public hidebysig static 
		int64 Max (
			int64 val1,
			int64 val2
		) cil managed 
	{
		.custom instance void System.Runtime.Versioning.NonVersionableAttribute::.ctor() = (
			01 00 00 00
		)
		// Method begins at RVA 0x4c1be
		// Code size 8 (0x8)
		.maxstack 8

		IL_0000: ldarg.0
		IL_0001: ldarg.1
		IL_0002: bge.s IL_0006

		IL_0004: ldarg.1
		IL_0005: ret

		IL_0006: ldarg.0
		IL_0007: ret
	} // end of method Math::Max

	.method public hidebysig static 
		int8 Max (
			int8 val1,
			int8 val2
		) cil managed 
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (
			01 00 00 00 00
		)
		.custom instance void System.Runtime.Versioning.NonVersionableAttribute::.ctor() = (
			01 00 00 00
		)
		// Method begins at RVA 0x4c1be
		// Code size 8 (0x8)
		.maxstack 8

		IL_0000: ldarg.0
		IL_0001: ldarg.1
		IL_0002: bge.s IL_0006

		IL_0004: ldarg.1
		IL_0005: ret

		IL_0006: ldarg.0
		IL_0007: ret
	} // end of method Math::Max

	.method public hidebysig static 
		float32 Max (
			float32 val1,
			float32 val2
		) cil managed aggressiveinlining 
	{
		// Method begins at RVA 0x4c1fa
		// Code size 34 (0x22)
		.maxstack 8

		IL_0000: ldarg.0
		IL_0001: ldarg.1
		IL_0002: beq.s IL_0016

		IL_0004: ldarg.0
		IL_0005: call bool System.Single::IsNaN(float32)
		IL_000a: brtrue.s IL_0014

		IL_000c: ldarg.1
		IL_000d: ldarg.0
		IL_000e: blt.s IL_0012

		IL_0010: ldarg.1
		IL_0011: ret

		IL_0012: ldarg.0
		IL_0013: ret

		IL_0014: ldarg.0
		IL_0015: ret

		IL_0016: ldarg.1
		IL_0017: call bool System.Single::IsNegative(float32)
		IL_001c: brtrue.s IL_0020

		IL_001e: ldarg.1
		IL_001f: ret

		IL_0020: ldarg.0
		IL_0021: ret
	} // end of method Math::Max

	.method public hidebysig static 
		uint16 Max (
			uint16 val1,
			uint16 val2
		) cil managed 
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (
			01 00 00 00 00
		)
		.custom instance void System.Runtime.Versioning.NonVersionableAttribute::.ctor() = (
			01 00 00 00
		)
		// Method begins at RVA 0x4c1be
		// Code size 8 (0x8)
		.maxstack 8

		IL_0000: ldarg.0
		IL_0001: ldarg.1
		IL_0002: bge.s IL_0006

		IL_0004: ldarg.1
		IL_0005: ret

		IL_0006: ldarg.0
		IL_0007: ret
	} // end of method Math::Max

	.method public hidebysig static 
		uint32 Max (
			uint32 val1,
			uint32 val2
		) cil managed 
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (
			01 00 00 00 00
		)
		.custom instance void System.Runtime.Versioning.NonVersionableAttribute::.ctor() = (
			01 00 00 00
		)
		// Method begins at RVA 0x4c21d
		// Code size 8 (0x8)
		.maxstack 8

		IL_0000: ldarg.0
		IL_0001: ldarg.1
		IL_0002: bge.un.s IL_0006

		IL_0004: ldarg.1
		IL_0005: ret

		IL_0006: ldarg.0
		IL_0007: ret
	} // end of method Math::Max

	.method public hidebysig static 
		uint64 Max (
			uint64 val1,
			uint64 val2
		) cil managed 
	{
		.custom instance void System.Runtime.Versioning.NonVersionableAttribute::.ctor() = (
			01 00 00 00
		)
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (
			01 00 00 00 00
		)
		// Method begins at RVA 0x4c21d
		// Code size 8 (0x8)
		.maxstack 8

		IL_0000: ldarg.0
		IL_0001: ldarg.1
		IL_0002: bge.un.s IL_0006

		IL_0004: ldarg.1
		IL_0005: ret

		IL_0006: ldarg.0
		IL_0007: ret
	} // end of method Math::Max

	.method public hidebysig static 
		float64 MaxMagnitude (
			float64 x,
			float64 y
		) cil managed 
	{
		// Method begins at RVA 0x4c228
		// Code size 46 (0x2e)
		.maxstack 2
		.locals (
			[0] float64,
			[1] float64
		)

		IL_0000: ldarg.0
		IL_0001: call float64 System.Math::Abs(float64)
		IL_0006: stloc.0
		IL_0007: ldarg.1
		IL_0008: call float64 System.Math::Abs(float64)
		IL_000d: stloc.1
		IL_000e: ldloc.0
		IL_000f: ldloc.1
		IL_0010: bgt.s IL_001a

		IL_0012: ldloc.0
		IL_0013: call bool System.Double::IsNaN(float64)
		IL_0018: brfalse.s IL_001c

		IL_001a: ldarg.0
		IL_001b: ret

		IL_001c: ldloc.0
		IL_001d: ldloc.1
		IL_001e: bne.un.s IL_002c

		IL_0020: ldarg.0
		IL_0021: call bool System.Double::IsNegative(float64)
		IL_0026: brtrue.s IL_002a

		IL_0028: ldarg.0
		IL_0029: ret

		IL_002a: ldarg.1
		IL_002b: ret

		IL_002c: ldarg.1
		IL_002d: ret
	} // end of method Math::MaxMagnitude

	.method public hidebysig static 
		uint8 Min (
			uint8 val1,
			uint8 val2
		) cil managed 
	{
		.custom instance void System.Runtime.Versioning.NonVersionableAttribute::.ctor() = (
			01 00 00 00
		)
		// Method begins at RVA 0x4c262
		// Code size 8 (0x8)
		.maxstack 8

		IL_0000: ldarg.0
		IL_0001: ldarg.1
		IL_0002: ble.s IL_0006

		IL_0004: ldarg.1
		IL_0005: ret

		IL_0006: ldarg.0
		IL_0007: ret
	} // end of method Math::Min

	.method public hidebysig static 
		valuetype System.Decimal Min (
			valuetype System.Decimal val1,
			valuetype System.Decimal val2
		) cil managed aggressiveinlining 
	{
		// Method begins at RVA 0x4c26b
		// Code size 15 (0xf)
		.maxstack 8

		IL_0000: ldarga.s val1
		IL_0002: ldarga.s val2
		IL_0004: call valuetype System.Decimal& modreq(System.Runtime.InteropServices.InAttribute) System.Decimal::Min(valuetype System.Decimal&, valuetype System.Decimal&)
		IL_0009: ldobj System.Decimal
		IL_000e: ret
	} // end of method Math::Min

	.method public hidebysig static 
		float64 Min (
			float64 val1,
			float64 val2
		) cil managed aggressiveinlining 
	{
		// Method begins at RVA 0x4c27b
		// Code size 32 (0x20)
		.maxstack 8

		IL_0000: ldarg.0
		IL_0001: ldarg.1
		IL_0002: beq.s IL_0014

		IL_0004: ldarg.0
		IL_0005: call bool System.Double::IsNaN(float64)
		IL_000a: brtrue.s IL_0014

		IL_000c: ldarg.0
		IL_000d: ldarg.1
		IL_000e: blt.s IL_0012

		IL_0010: ldarg.1
		IL_0011: ret

		IL_0012: ldarg.0
		IL_0013: ret

		IL_0014: ldarg.0
		IL_0015: call bool System.Double::IsNegative(float64)
		IL_001a: brtrue.s IL_001e

		IL_001c: ldarg.1
		IL_001d: ret

		IL_001e: ldarg.0
		IL_001f: ret
	} // end of method Math::Min

	.method public hidebysig static 
		int16 Min (
			int16 val1,
			int16 val2
		) cil managed 
	{
		.custom instance void System.Runtime.Versioning.NonVersionableAttribute::.ctor() = (
			01 00 00 00
		)
		// Method begins at RVA 0x4c262
		// Code size 8 (0x8)
		.maxstack 8

		IL_0000: ldarg.0
		IL_0001: ldarg.1
		IL_0002: ble.s IL_0006

		IL_0004: ldarg.1
		IL_0005: ret

		IL_0006: ldarg.0
		IL_0007: ret
	} // end of method Math::Min

	.method public hidebysig static 
		int32 Min (
			int32 val1,
			int32 val2
		) cil managed 
	{
		.custom instance void System.Runtime.Versioning.NonVersionableAttribute::.ctor() = (
			01 00 00 00
		)
		// Method begins at RVA 0x4c262
		// Code size 8 (0x8)
		.maxstack 8

		IL_0000: ldarg.0
		IL_0001: ldarg.1
		IL_0002: ble.s IL_0006

		IL_0004: ldarg.1
		IL_0005: ret

		IL_0006: ldarg.0
		IL_0007: ret
	} // end of method Math::Min

	.method public hidebysig static 
		int64 Min (
			int64 val1,
			int64 val2
		) cil managed 
	{
		.custom instance void System.Runtime.Versioning.NonVersionableAttribute::.ctor() = (
			01 00 00 00
		)
		// Method begins at RVA 0x4c262
		// Code size 8 (0x8)
		.maxstack 8

		IL_0000: ldarg.0
		IL_0001: ldarg.1
		IL_0002: ble.s IL_0006

		IL_0004: ldarg.1
		IL_0005: ret

		IL_0006: ldarg.0
		IL_0007: ret
	} // end of method Math::Min

	.method public hidebysig static 
		int8 Min (
			int8 val1,
			int8 val2
		) cil managed 
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (
			01 00 00 00 00
		)
		.custom instance void System.Runtime.Versioning.NonVersionableAttribute::.ctor() = (
			01 00 00 00
		)
		// Method begins at RVA 0x4c262
		// Code size 8 (0x8)
		.maxstack 8

		IL_0000: ldarg.0
		IL_0001: ldarg.1
		IL_0002: ble.s IL_0006

		IL_0004: ldarg.1
		IL_0005: ret

		IL_0006: ldarg.0
		IL_0007: ret
	} // end of method Math::Min

	.method public hidebysig static 
		float32 Min (
			float32 val1,
			float32 val2
		) cil managed aggressiveinlining 
	{
		// Method begins at RVA 0x4c29c
		// Code size 32 (0x20)
		.maxstack 8

		IL_0000: ldarg.0
		IL_0001: ldarg.1
		IL_0002: beq.s IL_0014

		IL_0004: ldarg.0
		IL_0005: call bool System.Single::IsNaN(float32)
		IL_000a: brtrue.s IL_0014

		IL_000c: ldarg.0
		IL_000d: ldarg.1
		IL_000e: blt.s IL_0012

		IL_0010: ldarg.1
		IL_0011: ret

		IL_0012: ldarg.0
		IL_0013: ret

		IL_0014: ldarg.0
		IL_0015: call bool System.Single::IsNegative(float32)
		IL_001a: brtrue.s IL_001e

		IL_001c: ldarg.1
		IL_001d: ret

		IL_001e: ldarg.0
		IL_001f: ret
	} // end of method Math::Min

	.method public hidebysig static 
		uint16 Min (
			uint16 val1,
			uint16 val2
		) cil managed 
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (
			01 00 00 00 00
		)
		.custom instance void System.Runtime.Versioning.NonVersionableAttribute::.ctor() = (
			01 00 00 00
		)
		// Method begins at RVA 0x4c262
		// Code size 8 (0x8)
		.maxstack 8

		IL_0000: ldarg.0
		IL_0001: ldarg.1
		IL_0002: ble.s IL_0006

		IL_0004: ldarg.1
		IL_0005: ret

		IL_0006: ldarg.0
		IL_0007: ret
	} // end of method Math::Min

	.method public hidebysig static 
		uint32 Min (
			uint32 val1,
			uint32 val2
		) cil managed 
	{
		.custom instance void System.Runtime.Versioning.NonVersionableAttribute::.ctor() = (
			01 00 00 00
		)
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (
			01 00 00 00 00
		)
		// Method begins at RVA 0x4c2bd
		// Code size 8 (0x8)
		.maxstack 8

		IL_0000: ldarg.0
		IL_0001: ldarg.1
		IL_0002: ble.un.s IL_0006

		IL_0004: ldarg.1
		IL_0005: ret

		IL_0006: ldarg.0
		IL_0007: ret
	} // end of method Math::Min

	.method public hidebysig static 
		uint64 Min (
			uint64 val1,
			uint64 val2
		) cil managed 
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (
			01 00 00 00 00
		)
		.custom instance void System.Runtime.Versioning.NonVersionableAttribute::.ctor() = (
			01 00 00 00
		)
		// Method begins at RVA 0x4c2bd
		// Code size 8 (0x8)
		.maxstack 8

		IL_0000: ldarg.0
		IL_0001: ldarg.1
		IL_0002: ble.un.s IL_0006

		IL_0004: ldarg.1
		IL_0005: ret

		IL_0006: ldarg.0
		IL_0007: ret
	} // end of method Math::Min

	.method public hidebysig static 
		float64 MinMagnitude (
			float64 x,
			float64 y
		) cil managed 
	{
		// Method begins at RVA 0x4c2c8
		// Code size 46 (0x2e)
		.maxstack 2
		.locals (
			[0] float64,
			[1] float64
		)

		IL_0000: ldarg.0
		IL_0001: call float64 System.Math::Abs(float64)
		IL_0006: stloc.0
		IL_0007: ldarg.1
		IL_0008: call float64 System.Math::Abs(float64)
		IL_000d: stloc.1
		IL_000e: ldloc.0
		IL_000f: ldloc.1
		IL_0010: blt.s IL_001a

		IL_0012: ldloc.0
		IL_0013: call bool System.Double::IsNaN(float64)
		IL_0018: brfalse.s IL_001c

		IL_001a: ldarg.0
		IL_001b: ret

		IL_001c: ldloc.0
		IL_001d: ldloc.1
		IL_001e: bne.un.s IL_002c

		IL_0020: ldarg.0
		IL_0021: call bool System.Double::IsNegative(float64)
		IL_0026: brtrue.s IL_002a

		IL_0028: ldarg.1
		IL_0029: ret

		IL_002a: ldarg.0
		IL_002b: ret

		IL_002c: ldarg.1
		IL_002d: ret
	} // end of method Math::MinMagnitude

	.method public hidebysig static 
		valuetype System.Decimal Round (
			valuetype System.Decimal d
		) cil managed aggressiveinlining 
	{
		// Method begins at RVA 0x4c302
		// Code size 8 (0x8)
		.maxstack 8

		IL_0000: ldarg.0
		IL_0001: ldc.i4.0
		IL_0002: call valuetype System.Decimal System.Decimal::Round(valuetype System.Decimal, int32)
		IL_0007: ret
	} // end of method Math::Round

	.method public hidebysig static 
		valuetype System.Decimal Round (
			valuetype System.Decimal d,
			int32 decimals
		) cil managed aggressiveinlining 
	{
		// Method begins at RVA 0x4c30b
		// Code size 8 (0x8)
		.maxstack 8

		IL_0000: ldarg.0
		IL_0001: ldarg.1
		IL_0002: call valuetype System.Decimal System.Decimal::Round(valuetype System.Decimal, int32)
		IL_0007: ret
	} // end of method Math::Round

	.method public hidebysig static 
		valuetype System.Decimal Round (
			valuetype System.Decimal d,
			valuetype System.MidpointRounding mode
		) cil managed aggressiveinlining 
	{
		// Method begins at RVA 0x4c314
		// Code size 9 (0x9)
		.maxstack 8

		IL_0000: ldarg.0
		IL_0001: ldc.i4.0
		IL_0002: ldarg.1
		IL_0003: call valuetype System.Decimal System.Decimal::Round(valuetype System.Decimal, int32, valuetype System.MidpointRounding)
		IL_0008: ret
	} // end of method Math::Round

	.method public hidebysig static 
		valuetype System.Decimal Round (
			valuetype System.Decimal d,
			int32 decimals,
			valuetype System.MidpointRounding mode
		) cil managed aggressiveinlining 
	{
		// Method begins at RVA 0x4c31e
		// Code size 9 (0x9)
		.maxstack 8

		IL_0000: ldarg.0
		IL_0001: ldarg.1
		IL_0002: ldarg.2
		IL_0003: call valuetype System.Decimal System.Decimal::Round(valuetype System.Decimal, int32, valuetype System.MidpointRounding)
		IL_0008: ret
	} // end of method Math::Round

	.method public hidebysig static 
		float64 Round (
			float64 a
		) cil managed 
	{
		.custom instance void System.Runtime.CompilerServices.IntrinsicAttribute::.ctor() = (
			01 00 00 00
		)
		// Method begins at RVA 0x4c328
		// Code size 135 (0x87)
		.maxstack 3
		.locals (
			[0] uint64,
			[1] int32,
			[2] uint64,
			[3] uint64,
			[4] float64
		)

		IL_0000: ldarg.0
		IL_0001: call int64 System.BitConverter::DoubleToInt64Bits(float64)
		IL_0006: stloc.0
		IL_0007: ldloc.0
		IL_0008: call int32 System.Double::ExtractExponentFromBits(uint64)
		IL_000d: stloc.1
		IL_000e: ldloc.1
		IL_000f: ldc.i4 1022
		IL_0014: bgt.s IL_004c

		IL_0016: ldloc.0
		IL_0017: ldc.i4.1
		IL_0018: shl
		IL_0019: brtrue.s IL_001d

		IL_001b: ldarg.0
		IL_001c: ret

		IL_001d: ldloc.1
		IL_001e: ldc.i4 1022
		IL_0023: bne.un.s IL_002d

		IL_0025: ldloc.0
		IL_0026: call uint64 System.Double::ExtractSignificandFromBits(uint64)
		IL_002b: brtrue.s IL_0038

		IL_002d: ldc.r8 0.0
		IL_0036: br.s IL_0041

		IL_0038: ldc.r8 1

		IL_0041: stloc.s 4
		IL_0043: ldloc.s 4
		IL_0045: ldarg.0
		IL_0046: call float64 System.Math::CopySign(float64, float64)
		IL_004b: ret

		IL_004c: ldloc.1
		IL_004d: ldc.i4 1075
		IL_0052: blt.s IL_0056

		IL_0054: ldarg.0
		IL_0055: ret

		IL_0056: ldc.i4.1
		IL_0057: conv.i8
		IL_0058: ldc.i4 1075
		IL_005d: ldloc.1
		IL_005e: sub
		IL_005f: ldc.i4.s 63
		IL_0061: and
		IL_0062: shl
		IL_0063: stloc.2
		IL_0064: ldloc.2
		IL_0065: ldc.i4.1
		IL_0066: conv.i8
		IL_0067: sub
		IL_0068: stloc.3
		IL_0069: ldloc.0
		IL_006a: ldloc.2
		IL_006b: ldc.i4.1
		IL_006c: shr.un
		IL_006d: add
		IL_006e: stloc.0
		IL_006f: ldloc.0
		IL_0070: ldloc.3
		IL_0071: and
		IL_0072: brtrue.s IL_007b

		IL_0074: ldloc.0
		IL_0075: ldloc.2
		IL_0076: not
		IL_0077: and
		IL_0078: stloc.0
		IL_0079: br.s IL_0080

		IL_007b: ldloc.0
		IL_007c: ldloc.3
		IL_007d: not
		IL_007e: and
		IL_007f: stloc.0

		IL_0080: ldloc.0
		IL_0081: call float64 System.BitConverter::Int64BitsToDouble(int64)
		IL_0086: ret
	} // end of method Math::Round

	.method public hidebysig static 
		float64 Round (
			float64 'value',
			int32 digits
		) cil managed aggressiveinlining 
	{
		// Method begins at RVA 0x4c3bb
		// Code size 9 (0x9)
		.maxstack 8

		IL_0000: ldarg.0
		IL_0001: ldarg.1
		IL_0002: ldc.i4.0
		IL_0003: call float64 System.Math::Round(float64, int32, valuetype System.MidpointRounding)
		IL_0008: ret
	} // end of method Math::Round

	.method public hidebysig static 
		float64 Round (
			float64 'value',
			valuetype System.MidpointRounding mode
		) cil managed aggressiveinlining 
	{
		// Method begins at RVA 0x4c3c5
		// Code size 9 (0x9)
		.maxstack 8

		IL_0000: ldarg.0
		IL_0001: ldc.i4.0
		IL_0002: ldarg.1
		IL_0003: call float64 System.Math::Round(float64, int32, valuetype System.MidpointRounding)
		IL_0008: ret
	} // end of method Math::Round

	.method public hidebysig static 
		float64 Round (
			float64 'value',
			int32 digits,
			valuetype System.MidpointRounding mode
		) cil managed 
	{
		// Method begins at RVA 0x4c3d0
		// Code size 245 (0xf5)
		.maxstack 3
		.locals (
			[0] float64,
			[1] float64
		)

		IL_0000: ldarg.1
		IL_0001: ldc.i4.0
		IL_0002: blt.s IL_0009

		IL_0004: ldarg.1
		IL_0005: ldc.i4.s 15
		IL_0007: ble.s IL_0019

		IL_0009: ldstr "digits"
		IL_000e: call string System.SR::get_ArgumentOutOfRange_RoundingDigits()
		IL_0013: newobj instance void System.ArgumentOutOfRangeException::.ctor(string, string)
		IL_0018: throw

		IL_0019: ldarg.2
		IL_001a: ldc.i4.0
		IL_001b: blt.s IL_0021

		IL_001d: ldarg.2
		IL_001e: ldc.i4.4
		IL_001f: ble.s IL_0041

		IL_0021: call string System.SR::get_Argument_InvalidEnumValue()
		IL_0026: ldarg.2
		IL_0027: box System.MidpointRounding
		IL_002c: ldstr "MidpointRounding"
		IL_0031: call string System.SR::Format(string, object, object)
		IL_0036: ldstr "mode"
		IL_003b: newobj instance void System.ArgumentException::.ctor(string, string)
		IL_0040: throw

		IL_0041: ldarg.0
		IL_0042: call float64 System.Math::Abs(float64)
		IL_0047: ldc.r8 10000000000000000
		IL_0050: bge.un IL_00f3

		IL_0055: ldsfld float64[] System.Math::roundPower10Double
		IL_005a: ldarg.1
		IL_005b: ldelem.r8
		IL_005c: stloc.0
		IL_005d: ldarg.0
		IL_005e: ldloc.0
		IL_005f: mul
		IL_0060: starg.s 'value'
		IL_0062: ldarg.2
		IL_0063: switch (IL_007e, IL_0088, IL_00b0, IL_00ba, IL_00c4)

		IL_007c: br.s IL_00ce

		IL_007e: ldarg.0
		IL_007f: call float64 System.Math::Round(float64)
		IL_0084: starg.s 'value'
		IL_0086: br.s IL_00ee

		IL_0088: ldarg.0
		IL_0089: ldarga.s 'value'
		IL_008b: conv.u
		IL_008c: call float64 System.Math::ModF(float64, float64*)
		IL_0091: stloc.1
		IL_0092: ldloc.1
		IL_0093: call float64 System.Math::Abs(float64)
		IL_0098: ldc.r8 0.5
		IL_00a1: blt.un.s IL_00ee

		IL_00a3: ldarg.0
		IL_00a4: ldloc.1
		IL_00a5: call int32 System.Math::Sign(float64)
		IL_00aa: conv.r8
		IL_00ab: add
		IL_00ac: starg.s 'value'
		IL_00ae: br.s IL_00ee

		IL_00b0: ldarg.0
		IL_00b1: call float64 System.Math::Truncate(float64)
		IL_00b6: starg.s 'value'
		IL_00b8: br.s IL_00ee

		IL_00ba: ldarg.0
		IL_00bb: call float64 System.Math::Floor(float64)
		IL_00c0: starg.s 'value'
		IL_00c2: br.s IL_00ee

		IL_00c4: ldarg.0
		IL_00c5: call float64 System.Math::Ceiling(float64)
		IL_00ca: starg.s 'value'
		IL_00cc: br.s IL_00ee

		IL_00ce: call string System.SR::get_Argument_InvalidEnumValue()
		IL_00d3: ldarg.2
		IL_00d4: box System.MidpointRounding
		IL_00d9: ldstr "MidpointRounding"
		IL_00de: call string System.SR::Format(string, object, object)
		IL_00e3: ldstr "mode"
		IL_00e8: newobj instance void System.ArgumentException::.ctor(string, string)
		IL_00ed: throw

		IL_00ee: ldarg.0
		IL_00ef: ldloc.0
		IL_00f0: div
		IL_00f1: starg.s 'value'

		IL_00f3: ldarg.0
		IL_00f4: ret
	} // end of method Math::Round

	.method public hidebysig static 
		int32 Sign (
			valuetype System.Decimal 'value'
		) cil managed aggressiveinlining 
	{
		// Method begins at RVA 0x4c4d1
		// Code size 8 (0x8)
		.maxstack 8

		IL_0000: ldarga.s 'value'
		IL_0002: call int32 System.Decimal::Sign(valuetype System.Decimal&)
		IL_0007: ret
	} // end of method Math::Sign

	.method public hidebysig static 
		int32 Sign (
			float64 'value'
		) cil managed 
	{
		// Method begins at RVA 0x4c4da
		// Code size 53 (0x35)
		.maxstack 8

		IL_0000: ldarg.0
		IL_0001: ldc.r8 0.0
		IL_000a: bge.un.s IL_000e

		IL_000c: ldc.i4.m1
		IL_000d: ret

		IL_000e: ldarg.0
		IL_000f: ldc.r8 0.0
		IL_0018: ble.un.s IL_001c

		IL_001a: ldc.i4.1
		IL_001b: ret

		IL_001c: ldarg.0
		IL_001d: ldc.r8 0.0
		IL_0026: bne.un.s IL_002a

		IL_0028: ldc.i4.0
		IL_0029: ret

		IL_002a: call string System.SR::get_Arithmetic_NaN()
		IL_002f: newobj instance void System.ArithmeticException::.ctor(string)
		IL_0034: throw
	} // end of method Math::Sign

	.method public hidebysig static 
		int32 Sign (
			int16 'value'
		) cil managed aggressiveinlining 
	{
		// Method begins at RVA 0x4c510
		// Code size 7 (0x7)
		.maxstack 8

		IL_0000: ldarg.0
		IL_0001: call int32 System.Math::Sign(int32)
		IL_0006: ret
	} // end of method Math::Sign

	.method public hidebysig static 
		int32 Sign (
			int32 'value'
		) cil managed 
	{
		// Method begins at RVA 0x4c518
		// Code size 11 (0xb)
		.maxstack 8

		IL_0000: ldarg.0
		IL_0001: ldc.i4.s 31
		IL_0003: shr
		IL_0004: ldarg.0
		IL_0005: neg
		IL_0006: ldc.i4.s 31
		IL_0008: shr.un
		IL_0009: or
		IL_000a: ret
	} // end of method Math::Sign

	.method public hidebysig static 
		int32 Sign (
			int64 'value'
		) cil managed 
	{
		// Method begins at RVA 0x4c524
		// Code size 12 (0xc)
		.maxstack 8

		IL_0000: ldarg.0
		IL_0001: ldc.i4.s 63
		IL_0003: shr
		IL_0004: ldarg.0
		IL_0005: neg
		IL_0006: ldc.i4.s 63
		IL_0008: shr.un
		IL_0009: or
		IL_000a: conv.i4
		IL_000b: ret
	} // end of method Math::Sign

	.method public hidebysig static 
		int32 Sign (
			int8 'value'
		) cil managed aggressiveinlining 
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (
			01 00 00 00 00
		)
		// Method begins at RVA 0x4c510
		// Code size 7 (0x7)
		.maxstack 8

		IL_0000: ldarg.0
		IL_0001: call int32 System.Math::Sign(int32)
		IL_0006: ret
	} // end of method Math::Sign

	.method public hidebysig static 
		int32 Sign (
			float32 'value'
		) cil managed 
	{
		// Method begins at RVA 0x4c531
		// Code size 41 (0x29)
		.maxstack 8

		IL_0000: ldarg.0
		IL_0001: ldc.r4 0.0
		IL_0006: bge.un.s IL_000a

		IL_0008: ldc.i4.m1
		IL_0009: ret

		IL_000a: ldarg.0
		IL_000b: ldc.r4 0.0
		IL_0010: ble.un.s IL_0014

		IL_0012: ldc.i4.1
		IL_0013: ret

		IL_0014: ldarg.0
		IL_0015: ldc.r4 0.0
		IL_001a: bne.un.s IL_001e

		IL_001c: ldc.i4.0
		IL_001d: ret

		IL_001e: call string System.SR::get_Arithmetic_NaN()
		IL_0023: newobj instance void System.ArithmeticException::.ctor(string)
		IL_0028: throw
	} // end of method Math::Sign

	.method public hidebysig static 
		valuetype System.Decimal Truncate (
			valuetype System.Decimal d
		) cil managed aggressiveinlining 
	{
		// Method begins at RVA 0x4c55b
		// Code size 7 (0x7)
		.maxstack 8

		IL_0000: ldarg.0
		IL_0001: call valuetype System.Decimal System.Decimal::Truncate(valuetype System.Decimal)
		IL_0006: ret
	} // end of method Math::Truncate

	.method public hidebysig static 
		float64 Truncate (
			float64 d
		) cil managed 
	{
		// Method begins at RVA 0x4c563
		// Code size 12 (0xc)
		.maxstack 8

		IL_0000: ldarg.0
		IL_0001: ldarga.s d
		IL_0003: conv.u
		IL_0004: call float64 System.Math::ModF(float64, float64*)
		IL_0009: pop
		IL_000a: ldarg.0
		IL_000b: ret
	} // end of method Math::Truncate

	.method private hidebysig static 
		void ThrowMinMaxException<T> (
			!!T min,
			!!T max
		) cil managed 
	{
		.custom instance void System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute::.ctor() = (
			01 00 00 00
		)
		// Method begins at RVA 0x4c570
		// Code size 28 (0x1c)
		.maxstack 8

		IL_0000: call string System.SR::get_Argument_MinMaxValue()
		IL_0005: ldarg.0
		IL_0006: box !!T
		IL_000b: ldarg.1
		IL_000c: box !!T
		IL_0011: call string System.SR::Format(string, object, object)
		IL_0016: newobj instance void System.ArgumentException::.ctor(string)
		IL_001b: throw
	} // end of method Math::ThrowMinMaxException

	.method private hidebysig specialname rtspecialname static 
		void .cctor () cil managed 
	{
		// Method begins at RVA 0x4c58d
		// Code size 24 (0x18)
		.maxstack 8

		IL_0000: ldc.i4.s 16
		IL_0002: newarr System.Double
		IL_0007: dup
		IL_0008: ldtoken field valuetype '<PrivateImplementationDetails>'/'__StaticArrayInitTypeSize=128' '<PrivateImplementationDetails>'::'195ABC1ABB69B6BD65F20ACAFA79EED2D330BF513E25C830F24B8A78D8703446'
		IL_000d: call void System.Runtime.CompilerServices.RuntimeHelpers::InitializeArray(class System.Array, valuetype System.RuntimeFieldHandle)
		IL_0012: stsfld float64[] System.Math::roundPower10Double
		IL_0017: ret
	} // end of method Math::.cctor

	.method assembly hidebysig static 
		uint64 '<BigMul>g__SoftwareFallback|42_0' (
			uint64 a,
			uint64 b,
			[out] uint64& low
		) cil managed 
	{
		.custom instance void System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = (
			01 00 00 00
		)
		// Method begins at RVA 0x4c5a8
		// Code size 80 (0x50)
		.maxstack 3
		.locals (
			[0] uint32,
			[1] uint32,
			[2] uint32,
			[3] uint32,
			[4] uint64,
			[5] uint64,
			[6] uint64
		)

		IL_0000: ldarg.0
		IL_0001: conv.u4
		IL_0002: stloc.0
		IL_0003: ldarg.0
		IL_0004: ldc.i4.s 32
		IL_0006: shr.un
		IL_0007: conv.u4
		IL_0008: stloc.1
		IL_0009: ldarg.1
		IL_000a: conv.u4
		IL_000b: stloc.2
		IL_000c: ldarg.1
		IL_000d: ldc.i4.s 32
		IL_000f: shr.un
		IL_0010: conv.u4
		IL_0011: stloc.3
		IL_0012: ldloc.0
		IL_0013: conv.u8
		IL_0014: ldloc.2
		IL_0015: conv.u8
		IL_0016: mul
		IL_0017: stloc.s 4
		IL_0019: ldloc.1
		IL_001a: conv.u8
		IL_001b: ldloc.2
		IL_001c: conv.u8
		IL_001d: mul
		IL_001e: ldloc.s 4
		IL_0020: ldc.i4.s 32
		IL_0022: shr.un
		IL_0023: add
		IL_0024: stloc.s 5
		IL_0026: ldloc.0
		IL_0027: conv.u8
		IL_0028: ldloc.3
		IL_0029: conv.u8
		IL_002a: mul
		IL_002b: ldloc.s 5
		IL_002d: conv.u4
		IL_002e: conv.u8
		IL_002f: add
		IL_0030: stloc.s 6
		IL_0032: ldarg.2
		IL_0033: ldloc.s 6
		IL_0035: ldc.i4.s 32
		IL_0037: shl
		IL_0038: ldloc.s 4
		IL_003a: conv.u4
		IL_003b: conv.u8
		IL_003c: or
		IL_003d: stind.i8
		IL_003e: ldloc.1
		IL_003f: conv.u8
		IL_0040: ldloc.3
		IL_0041: conv.u8
		IL_0042: mul
		IL_0043: ldloc.s 5
		IL_0045: ldc.i4.s 32
		IL_0047: shr.un
		IL_0048: add
		IL_0049: ldloc.s 6
		IL_004b: ldc.i4.s 32
		IL_004d: shr.un
		IL_004e: add
		IL_004f: ret
	} // end of method Math::'<BigMul>g__SoftwareFallback|42_0'

	.method assembly hidebysig static 
		float64 '<CopySign>g__SoftwareFallback|46_0' (
			float64 x,
			float64 y
		) cil managed 
	{
		.custom instance void System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = (
			01 00 00 00
		)
		// Method begins at RVA 0x4c604
		// Code size 47 (0x2f)
		.maxstack 2
		.locals (
			[0] int64,
			[1] int64
		)

		IL_0000: ldarg.0
		IL_0001: call int64 System.BitConverter::DoubleToInt64Bits(float64)
		IL_0006: stloc.0
		IL_0007: ldarg.1
		IL_0008: call int64 System.BitConverter::DoubleToInt64Bits(float64)
		IL_000d: stloc.1
		IL_000e: ldloc.0
		IL_000f: ldc.i8 9223372036854775807
		IL_0018: and
		IL_0019: stloc.0
		IL_001a: ldloc.1
		IL_001b: ldc.i8 -9223372036854775808
		IL_0024: and
		IL_0025: stloc.1
		IL_0026: ldloc.0
		IL_0027: ldloc.1
		IL_0028: or
		IL_0029: call float64 System.BitConverter::Int64BitsToDouble(int64)
		IL_002e: ret
	} // end of method Math::'<CopySign>g__SoftwareFallback|46_0'

} // end of class System.Math
